name: Build and Package
on:
  workflow_dispatch: {}

jobs:
  build:
    name: Build and Package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            rust: nightly-x86_64-msvc
            target: x86_64-pc-windows-msvc
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build Projects
        shell: bash
        run: |
          for project in Node License-learning; do
            echo "Building $project..."
            cd $project
            cargo build --verbose --release --target ${{ matrix.target }}
            if [ $? -ne 0 ]; then
              echo "Failed to build $project"
              exit 1
            fi
            cd ..
          done
        env:
          RUST_BACKTRACE: 1

      - name: Prepare Archive
        shell: bash
        run: |
          mkdir -p archive
          ls -lr
          for project in Node License-learning; do
            binary_name=$(echo $project | tr '[:upper:]' '[:lower:]' | tr '-' '_')
            cp "./$project/target/${{ matrix.target }}/release/$binary_name.exe" ./archive/
          done
          cd archive
          7z a "${{ matrix.archive_name }}" *.exe

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: archive/${{ matrix.archive_name }}
