name: Build and Package
on:
  workflow_dispatch: {}

jobs:
  build:
    name: Build and Package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - platform: windows
            os: windows-latest
            rust_toolchain: stable-x86_64-msvc
            target: x86_64-pc-windows-msvc
            bin_ext: .exe
            arch: x86_64

          - platform: linux
            os: ubuntu-latest
            rust_toolchain: stable-x86_64-unknown-linux-gnu
            target: x86_64-unknown-linux-gnu
            bin_ext: ""
            arch: x86_64

          - platform: macos
            os: macos-13
            rust_toolchain: stable-x86_64-apple-darwin
            target: x86_64-apple-darwin
            bin_ext: ""
            arch: x86_64

          - platform: macos
            os: macos-latest
            rust_toolchain: stable-aarch64-apple-darwin
            target: aarch64-apple-darwin
            bin_ext: ""
            arch: aarch64
      fail-fast: false

    steps:
      - name: Checkout Repositories
        uses: actions/checkout@v4
        with:
          path: src
      
      - name: Install System Tools
        shell: bash
        run: |
          # ÊâÄÊúâÂπ≥Âè∞ÂÆâË£Ö zip Â∑•ÂÖ∑
          case "${{ matrix.platform }}" in
            windows)
              choco install 7zip -y  # Windows ‰ΩøÁî® 7-zip Â¢ûÂº∫ÂÖºÂÆπÊÄß
              ;;
            linux)
              sudo apt-get update && sudo apt-get install -y zip
              ;;
          esac

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_toolchain }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build Projects
        shell: bash
        run: |
          projects=(Node License_learning)
          for project in "${projects[@]}"; do
            echo "üõ† Building $project..."
            cd src/$project
            cargo build --release --target ${{ matrix.target }} --verbose
            cd ../..
          done
        env:
          RUST_BACKTRACE: 1

      - name: Package Artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          ls -R
          for project in Node License_learning; do
            bin_name=$(echo $project )
            cp "src/$project/target/${{ matrix.target }}/release/$bin_name${{ matrix.bin_ext}}" \
              artifacts/
          done

          # Áªü‰∏Ä‰ΩøÁî® zip ÊâìÂåÖ
          case "${{ matrix.platform }}" in
            windows)
              7z a -tzip "artifacts/Inject-${{ matrix.platform }}-${{ matrix.arch }}.zip" ./artifacts/*
              ;;
            *)
              zip -r "artifacts/Inject-${{ matrix.platform }}-${{ matrix.arch }}.zip" ./artifacts/*
              ;;
          esac

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Inject-${{ matrix.platform }}-${{ matrix.arch }}
          path: artifacts/Inject-${{ matrix.platform }}-${{ matrix.arch }}.zip